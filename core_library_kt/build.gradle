apply plugin:'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 28
    flavorDimensions "CoreKt"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 35
        versionName "1.36"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    productFlavors {
        develop {
            flavorDimensions "CoreKt"
        }
        production {
            flavorDimensions "CoreKt"
        }
    }
    defaultPublishConfig "productionRelease"
}

group='com.github.CoreKt'

def supportVersion = "28.0.0"

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"

    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.squareup.okio:okio:1.15.0'
    //implementation 'com.squareup.okhttp:okhttp:2.5.0'
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'

    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'joda-time:joda-time:2.8.1'
    implementation 'me.dm7.barcodescanner:zxing:1.8.3'
    implementation 'com.squareup.picasso:picasso:2.5.2'

    implementation files('libs/universal-image-loader-1.9.5.jar')
    implementation files('libs/volley.jar')
}

if (android.productFlavors.size() > 0) {
    android.libraryVariants.all { variant ->

        if (variant.name.toLowerCase().contains("debug")) {
            return
        }

        def bundleTask = tasks["bundle${variant.name.capitalize()}Aar"]

        artifacts {
            archives(bundleTask.archivePath) {
                classifier variant.flavorName
                builtBy bundleTask
                name = project.name
            }
        }

        def flavorName = variant.flavorName.toLowerCase()
        def flavorSourcesTask = tasks.create(name : "${flavorName}SourcesJar", type: Jar) {
            classifier = "${flavorName}-sources"
            from android.sourceSets.main.javaDirectories
            from android.sourceSets[flavorName].javaDirectories
        }

        artifacts {
            archives flavorSourcesTask
        }
    }
}
